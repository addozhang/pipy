#
# For this example to work properly, a table `log` needs to
# be created in ClickHouse before hand by using command:
#
# CREATE TABLE default.log
# (
# `uuid` String DEFAULT JSONExtractString(message, 'uuid'),
# `type` String DEFAULT JSONExtractString(message, 'type'),
# `message` String,
# `timestamp` DateTime DEFAULT now()
# )
# ENGINE = MergeTree
# ORDER BY uuid
# SETTINGS index_granularity = 8192;

pipy

  #
  # Proxy with logging
  #

  pipeline :6000
    decode-http-request
      prefix = in

    # Generate a unique ID for every message
    script
      source = tag.js

    # Clone and send out request messages
    clone
      to = log-request

    # Proxy to upstreams
    encode-http-request
      prefix = in
    proxy-tcp
      to = 127.0.0.1:8080
    decode-http-response
      prefix = out

    # Clone and send out response messages
    clone
      to = log-response

    encode-http-response
      prefix = out

  #
  # Log requests
  #

  pipeline log-request

    # Format log message
    script
      source = format-request.js

    # Send to shared connection
    clone
      to = log
      session = log

  #
  # Log response
  #

  pipeline log-response

    # Format log message
    script
      source = format-response.js

    # Send to shared connection
    clone
      to = log
      session = log

  #
  # Shared logging connection
  #

  pipeline log
    encode-http-request
      method = POST
      path = /?query=insert%20into%20log(message)%20format%20JSONAsString
      headers.Content-Type = application/json
    proxy-tcp
      to = 127.0.0.1:8123
      retry_count = -1
      retry_delay = 5s
      buffer_limit = 256M

  #
  # Mock service
  #

  pipeline :8080
    decode-http-request
      prefix = a
    hello
      message = '{"result": "ok"}'
    encode-http-response
      prefix = a
      headers.Server = pipy-0.1.0
      status_code = 200

